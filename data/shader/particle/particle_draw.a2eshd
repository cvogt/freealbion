<?xml version="1.0" encoding="UTF-8"?>
<a2e_shader version="1">
	<vertex_shader>
		<variables>
			<condition value="VERTEX_TEXTURE_FETCH_SUPPORT" type="EQUAL">
uniform sampler2D particle_pos_tex;
			</condition>
		</variables>
		<variables>
uniform float living_time;
uniform vec2 size;

varying vec2 tex_coord;
		</variables>
		<program>
void main() {
		<condition value="VERTEX_TEXTURE_FETCH_SUPPORT" type="EQUAL">
		vec4 particle_data = texture2D(particle_pos_tex, gl_Vertex.zw).rgba;
		</condition>
		<condition value="VERTEX_TEXTURE_FETCH_SUPPORT" type="NEQUAL">
		vec4 particle_data = gl_Color.rgba;
		</condition>
		vec2 vsign = vec2(0.5 - gl_Vertex.x, 0.5 - gl_Vertex.y) * -size.yx; // size must be swapped?
		vec3 right = vec3(gl_ModelViewMatrix[0][0], gl_ModelViewMatrix[1][0], gl_ModelViewMatrix[2][0]);
		vec3 up = vec3(gl_ModelViewMatrix[0][1], gl_ModelViewMatrix[1][1], gl_ModelViewMatrix[2][1]);
		vec4 quad = vec4(particle_data.rgb + (vsign.y * right + vsign.x * up), 1.0);
		
		if(particle_data.a < 0.0 || particle_data.a > living_time) {
			gl_Position = vec4(vec3(1e7), 1.0); // we have to write a position even if the particle is discarded (we'll get strange particle positions otherwise)
			tex_coord = vec2(-1.0);
		}
		else {
			gl_Position = gl_ModelViewProjectionMatrix * quad;
			tex_coord = gl_Vertex.xy;
		}
}
		</program>
	</vertex_shader>
	
	<fragment_shader>
		<variables>
uniform sampler2D particle_tex;
varying vec2 tex_coord;
		</variables>
		<program>
void main() {
	if(tex_coord.x < 0.0) discard;

	vec4 color = texture2D(particle_tex, tex_coord);
	gl_FragColor = vec4(color.xyz*color.a, color.a);
}
		</program>
	</fragment_shader>

</a2e_shader>