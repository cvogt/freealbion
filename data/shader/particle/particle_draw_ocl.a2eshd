<?xml version="1.0" encoding="UTF-8"?>
<a2e_shader version="1">
	<vertex_shader>
		<variables>
uniform float living_time;
in vec4 in_vertex;
		</variables>
		<program>
void main() {
	if(in_vertex.w < 0.0 || in_vertex.w > living_time) {
		gl_Position = vec4(vec3(1e7), -1.0); // we have to write a position even if the particle is discarded (we'll get strange particle positions otherwise)
	}
	else gl_Position = vec4(in_vertex.xyz, 1.0);
}
		</program>
	</vertex_shader>
	
	<geometry_shader>
		<preprocessor>
layout(points) in;
layout(triangle_strip, max_vertices=4) out;
		</preprocessor>
		<variables>
uniform vec2 size;
uniform mat4 mvm;
uniform mat4 mvpm;

out vec2 tex_coord;
		</variables>
		<program>
void main() {
	vec4 in_pos = gl_in[0].gl_Position;
	if(in_pos.w < 0.0) return; // discard particle
	
	vec3 right = vec3(mvm[0][0], mvm[1][0], mvm[2][0]);
	vec3 up = vec3(mvm[0][1], mvm[1][1], mvm[2][1]);

	gl_Position = mvpm * (in_pos + vec4((-0.5 * size.x) * right + (-0.5 * size.y) * up, 0.0));
	tex_coord = vec2(0.0, 0.0);
	EmitVertex();
	
	gl_Position = mvpm * (in_pos + vec4((-0.5 * size.x) * right + (0.5 * size.y) * up, 0.0));
	tex_coord = vec2(1.0, 0.0);
	EmitVertex();
	
	gl_Position = mvpm * (in_pos + vec4((0.5 * size.x) * right + (-0.5 * size.y) * up, 0.0));
	tex_coord = vec2(0.0, 1.0);
	EmitVertex();
	
	gl_Position = mvpm * (in_pos + vec4((0.5 * size.x) * right + (0.5 * size.y) * up, 0.0));
	tex_coord = vec2(1.0, 1.0);
	EmitVertex();
	
	EndPrimitive();
}
		</program>
	</geometry_shader>
	
	<fragment_shader>
		<variables>
uniform sampler2D particle_tex;
in vec2 tex_coord;
out vec4 frag_color;
		</variables>
		<program>
void main() {
	vec4 color = texture(particle_tex, tex_coord);
	frag_color = vec4(color.xyz*color.a, color.a);
}
		</program>
	</fragment_shader>

</a2e_shader>