<?xml version="1.0" encoding="UTF-8"?>
<a2e_shader version="1">
	<vertex_shader>
		<variables>
uniform float living_time;
		</variables>
		<program>
void main() {
	if(gl_Vertex.w < 0.0 || gl_Vertex.w > living_time) {
		gl_Position = vec4(vec3(1e7), -1.0); // we have to write a position even if the particle is discarded (we'll get strange particle positions otherwise)
	}
	else gl_Position = vec4(gl_Vertex.xyz, 1.0);
}
		</program>
	</vertex_shader>
	
	<geometry_shader version="120">
		<preprocessor>
#extension GL_EXT_gpu_shader4 : enable
#extension GL_EXT_geometry_shader4 : enable
		</preprocessor>
		<variables>
uniform vec2 size;
varying vec2 tex_coord;
		</variables>
		<program>
void main() {
	if(gl_PositionIn[0].w < 0.0) return;
	
	vec3 right = vec3(gl_ModelViewMatrix[0][0], gl_ModelViewMatrix[1][0], gl_ModelViewMatrix[2][0]);
	vec3 up = vec3(gl_ModelViewMatrix[0][1], gl_ModelViewMatrix[1][1], gl_ModelViewMatrix[2][1]);

	gl_Position = gl_ModelViewProjectionMatrix * (gl_PositionIn[0] + vec4((-0.5 * size.x) * right + (-0.5 * size.y) * up, 0.0));
	tex_coord = vec2(0.0, 0.0);
	EmitVertex();
	gl_Position = gl_ModelViewProjectionMatrix * (gl_PositionIn[0] + vec4((-0.5 * size.x) * right + (0.5 * size.y) * up, 0.0));
	tex_coord = vec2(1.0, 0.0);
	EmitVertex();
	gl_Position = gl_ModelViewProjectionMatrix * (gl_PositionIn[0] + vec4((0.5 * size.x) * right + (-0.5 * size.y) * up, 0.0));
	tex_coord = vec2(0.0, 1.0);
	EmitVertex();
	gl_Position = gl_ModelViewProjectionMatrix * (gl_PositionIn[0] + vec4((0.5 * size.x) * right + (0.5 * size.y) * up, 0.0));
	tex_coord = vec2(1.0, 1.0);
	EmitVertex();
	EndPrimitive();
}
		</program>
	</geometry_shader>
	
	<fragment_shader>
		<variables>
uniform sampler2D particle_tex;
varying vec2 tex_coord;
		</variables>
		<program>
void main() {
	vec4 color = texture2D(particle_tex, tex_coord);
	gl_FragColor = vec4(color.xyz*color.a, color.a);
}
		</program>
	</fragment_shader>

</a2e_shader>