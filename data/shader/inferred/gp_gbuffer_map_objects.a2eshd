<?xml version="1.0" encoding="UTF-8"?>
<a2e_shader version="1">
	<includes>global inferred_gbuffer</includes>
	
	<vertex_shader>
		<variables>
uniform vec3 cam_position;
uniform mat4 mvpm;

in vec3 ws_position;
in vec2 texture_coord;

out vec2 out_tex_coord;
		</variables>
		<program>
void main() {
	vec3 view_vec = normalize(vec3(cam_position.x - ws_position.x,
								   0.0,
								   cam_position.z - ws_position.z));
	vec3 up_vec = vec3(0.0, 1.0, 0.0);
	vec3 right_vec = cross(view_vec, up_vec);
	
	mat3 bb_mat = mat3(right_vec, up_vec, view_vec);
	vec4 vertex = vec4((in_vertex * bb_mat) + ws_position, 1.0);
	
	out_tex_coord = texture_coord;
	
	gl_Position = mvpm * vertex;
}
		</program>
	</vertex_shader>
	
	<fragment_shader>
		<variables>
uniform sampler2D diffuse_texture;
uniform vec2 Nuv;

in vec2 out_tex_coord;
		</variables>
		<program>
void main() {
	check_mask_id();
	
	if(texture(diffuse_texture, out_tex_coord).a < 0.5) discard;
	
	// write to gbuffer
	// small hack: set the normal to (0, 1, 0), since we're rendering 2.5D objects
	// and this way they'll most certainly point to a light source (/be lit by one)
	write_gbuffer(vec3(0.0, 1.0, 0.0), Nuv);
}
		</program>
	</fragment_shader>

</a2e_shader>