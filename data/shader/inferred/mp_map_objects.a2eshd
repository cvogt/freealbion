<?xml version="1.0" encoding="UTF-8"?>
<a2e_shader version="1">
	<options list="# opaque alpha" />
	<includes>global inferred</includes>

	<vertex_shader>
		<variables>
uniform vec3 cam_position;

in vec3 ws_position;
in vec2 texture_coord;
in vec4 tc_restrict;

out vec2 out_tex_coord;
		</variables>
		<program>
void main() {
	out_tex_coord = texture_coord;
	
	vec3 view_vec = normalize(vec3(cam_position.x - ws_position.x,
								   0.0,
								   cam_position.z - ws_position.z));
	vec3 up_vec = vec3(0.0, 1.0, 0.0);
	vec3 right_vec = cross(view_vec, up_vec);
	
	mat3 bb_mat = mat3(right_vec, up_vec, view_vec);
	vec4 vertex = vec4((in_vertex * bb_mat) + ws_position, 1.0);
	
	// instead of inferred_vs():
	<option value="alpha">
	out_depth = -(mvm * vertex).z;
	out_position = mvpm * vertex;
	</option>
	
	gl_Position = mvpm * vertex;
}
		</program>
	</vertex_shader>
	
	<fragment_shader>
		<variables>
uniform sampler2D diffuse_texture;
uniform sampler2D specular_texture;

in vec3 out_normal;
in vec2 out_tex_coord;
		</variables>
		<program>
void main() {
	vec4 diff_color = texture(diffuse_texture, out_tex_coord);
	if(diff_color.a < 0.5) discard;
	vec4 spec_color = texture(specular_texture, out_tex_coord);
	
	vec4 light_color = compute_light_color();
	
	////////////////////////////////////////////////////////////////////////////
	// lighting
	vec3 final_color = light_color.rgb * diff_color.rgb + light_color.a * spec_color.rgb;
	
	frag_color = vec4(final_color * diff_color.a, diff_color.a);
}
		</program>
	</fragment_shader>
	
</a2e_shader>