<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE a2e_shader PUBLIC "-//A2E//DTD a2e_shader 2.0//EN" "a2e_shader.dtd">
<a2e_shader version="2">
	<options># opaque alpha</options>
	<includes>global inferred</includes>

	<vertex_shader>
uniform vec3 cam_position;

in vec3 ws_position;
in vec2 texture_coord;
in vec4 tc_restrict;

out vec2 out_tex_coord;

void main() {
	out_tex_coord = texture_coord;
	
	vec3 view_vec = normalize(vec3(cam_position.x - ws_position.x,
								   0.0,
								   cam_position.z - ws_position.z));
	vec3 up_vec = vec3(0.0, 1.0, 0.0);
	vec3 right_vec = cross(view_vec, up_vec);
	
	mat3 bb_mat = mat3(right_vec, up_vec, view_vec);
	vec4 vertex = vec4((in_vertex * bb_mat) + ws_position, 1.0);
	
	// instead of inferred_vs():
	<option match="alpha">
	out_vertex_alpha.depth = -(mvm * vertex).z;
	out_vertex_alpha.position = mvpm * vertex;
	</option>
	
	gl_Position = mvpm * vertex;
}
	</vertex_shader>
	
	<fragment_shader>
uniform sampler2D diffuse_texture;
uniform sampler2D specular_texture;
uniform sampler2D reflectance_texture;

in vec3 out_normal;
in vec2 out_tex_coord;

void main() {
	vec4 diff_color = texture(diffuse_texture, out_tex_coord);
	if(diff_color.a < 0.5) discard;
	vec4 spec_color = texture(specular_texture, out_tex_coord);
	vec3 refl_color = texture(reflectance_texture, out_tex_coord).xyz;
	
	vec4 light_colors[2] = compute_light_colors();
	
	////////////////////////////////////////////////////////////////////////////
	// lighting
	vec3 final_color = compute_diffuse(diff_color.rgb, refl_color, light_colors[0]);
	final_color += compute_specular(spec_color.rgb, refl_color, light_colors[1]);
	
	<option match="opaque">
	frag_color = vec4(final_color * diff_color.a, 1.0);
	</option>
	<option match="alpha">
	frag_color = vec4(final_color * diff_color.a, diff_color.a);
	</option>
}
	</fragment_shader>
	
</a2e_shader>