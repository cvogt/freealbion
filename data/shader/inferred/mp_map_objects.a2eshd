<?xml version="1.0" encoding="UTF-8"?>
<a2e_shader version="1">
	<includes>inferred</includes>

	<vertex_shader version="120">
		<variables>
uniform mat4 local_mview;
uniform mat4 local_scale;
uniform vec3 cam_position;

attribute vec3 ws_position;
attribute vec3 normal;
attribute vec2 texture_coord;
attribute vec4 tc_restrict;

varying vec3 out_normal;
varying vec2 out_tex_coord;
varying vec4 out_tc_restrict;
		</variables>
		<program>
void main() {
	mat4 transform_mat = local_scale * local_mview;
	
	out_normal = vec3(transform_mat * vec4(normal, 1.0));
	out_tex_coord = texture_coord;
	
	vec3 view_vec = normalize(vec3(cam_position.x - ws_position.x, 0.0, cam_position.z - ws_position.z));
	vec3 up_vec = vec3(0.0, 1.0, 0.0);
	vec3 right_vec = cross(view_vec, up_vec);
	
	mat3 bb_mat;
	bb_mat[0][0] = right_vec.x;
	bb_mat[1][0] = right_vec.y;
	bb_mat[2][0] = right_vec.z;
	
	bb_mat[0][1] = up_vec.x;
	bb_mat[1][1] = up_vec.y;
	bb_mat[2][1] = up_vec.z;
	
	bb_mat[0][2] = view_vec.x;
	bb_mat[1][2] = view_vec.y;
	bb_mat[2][2] = view_vec.z;
	
	vec4 vertex = vec4((bb_mat * gl_Vertex.xyz) + ws_position, 1.0);
	out_normal = bb_mat * -out_normal;
	
	out_tc_restrict = tc_restrict;
	
	//inferred_vs();
	out_depth = -(gl_ModelViewMatrix * vertex).z;
	out_position = gl_ModelViewProjectionMatrix * vertex;
	
	gl_Position = gl_ModelViewProjectionMatrix * vertex;
}
		</program>
	</vertex_shader>
	
	<fragment_shader version="120">
		<variables>
uniform sampler2D diffuse_texture;
uniform sampler2D specular_texture;
uniform vec2 diffuse_texel_size;

varying vec3 out_normal;
varying vec2 out_tex_coord;
varying vec4 out_tc_restrict;
		</variables>
		<program>
void main() {
	vec2 tex_coord = clamp(out_tex_coord, out_tc_restrict.xy+diffuse_texel_size, out_tc_restrict.zw-diffuse_texel_size);
	vec4 diff_color = texture2D(diffuse_texture, tex_coord);
	if(diff_color.a < 0.5) discard;
	vec4 spec_color = texture2D(specular_texture, tex_coord);
	
	vec4 light_color = compute_light_color();
	
	////////////////////////////////////////////////////////////////////////////
	// decode normal
	vec3 normal = normalize(out_normal); // TODO: read normal from buffer or compute again (more accurate?)?
	
	////////////////////////////////////////////////////////////////////////////
	// lighting
	vec3 final_color = light_color.rgb * diff_color.rgb + light_color.a * spec_color.rgb;
	
	//final_color = light_color.rgb;
	gl_FragColor = vec4(final_color, 1.0);
}
		</program>
	</fragment_shader>
	
</a2e_shader>