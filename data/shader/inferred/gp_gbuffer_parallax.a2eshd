<?xml version="1.0" encoding="UTF-8"?>
<a2e_shader version="1">
	<includes>gbuffer inferred_gbuffer</includes>
	
	<vertex_shader>
		<variables>
uniform mat4 local_mview;
uniform mat4 local_scale;
uniform vec3 cam_position;
uniform vec3 model_position;

attribute vec3 normal;
attribute vec2 texture_coord;
attribute vec3 binormal;
attribute vec3 tangent;

varying vec2 out_tex_coord;
varying vec3 out_view_vec;
		</variables>
		<program>
void main() {
	mat4 transform_mat = local_scale * local_mview;
	
	out_tex_coord = texture_coord;
	
	vec3 tvertex = vec3(transform_mat * gl_Vertex);
	vec3 vview = cam_position - model_position - tvertex;
	
	vec3 vv_tangent = vec3(transform_mat * vec4(tangent, 1.0));
	vec3 vv_binormal = vec3(transform_mat * vec4(binormal, 1.0));
	vec3 vv_normal = vec3(transform_mat * vec4(normal, 1.0));
	
	out_view_vec.x = dot(vview, vv_tangent);  // s tangent
	out_view_vec.y = dot(vview, vv_binormal); // t tangent
	out_view_vec.z = dot(vview, vv_normal);   // normal
	
	gl_Position = gl_ModelViewProjectionMatrix * gl_Vertex;
}
		</program>
	</vertex_shader>
	
	<fragment_shader>
		<variables>
uniform sampler2D height_texture;
uniform sampler2D normal_texture;
uniform vec2 Nuv;
uniform vec2 id;

varying vec2 out_tex_coord;
varying vec3 out_view_vec;
		</variables>
		<program>
void main() {
	check_mask_id();

	//
	vec3 view_vec = normalize(out_view_vec);
	
	// determines the "deepness"
	const float parallax = 0.03;
	
	// compute parallax tex coord
	float height = 0.0;
	float offset = 0.0;
	vec2 parallax_tex_coord = out_tex_coord;
	<condition value="GC_RADEON_X" type="LEQUAL">
		height += texture2D(height_texture, parallax_tex_coord).x;
		offset = parallax * (2.0 * height - 1.0);
		parallax_tex_coord = out_tex_coord + offset * view_vec.xy;
		height += texture2D(height_texture, parallax_tex_coord).x;
		offset = parallax * (height - 1.0);
		parallax_tex_coord = out_tex_coord + offset * view_vec.xy;
		height += texture2D(height_texture, parallax_tex_coord).x;
		offset = parallax * (2.0 / 3.0 * height - 1.0);
		parallax_tex_coord = out_tex_coord + offset * view_vec.xy;
	</condition>
	<condition value="GC_RADEON_X" type="NLEQUAL">
	for(int i = 1; i < 4; i++) {
		height += texture2D(height_texture, parallax_tex_coord).x;
		offset = parallax * ((2.0 / float(i)) * height - 1.0);
		parallax_tex_coord = out_tex_coord + offset * view_vec.xy;
	}
	</condition>
	
	vec3 normal = texture2D(normal_texture, parallax_tex_coord).xyz * 2.0 - 1.0;
	
	// write to gbuffer
	gl_FragData[0].rgba = vec4(encode_normal(normal), Nuv);
	gl_FragData[1].rgba = vec4(id, 0.0, 0.0);
}
		</program>
	</fragment_shader>

</a2e_shader>