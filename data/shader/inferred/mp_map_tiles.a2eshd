<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE a2e_shader PUBLIC "-//A2E//DTD a2e_shader 2.0//EN" "a2e_shader.dtd">
<a2e_shader version="2">
	<includes>global inferred</includes>

	<vertex_shader>
in vec2 texture_coord;
out vec2 out_tex_coord;

void main() {
	out_tex_coord = texture_coord;
	
	inferred_vs();
	
	gl_Position = mvpm * vec4(in_vertex, 1.0);
}
	</vertex_shader>
	
	<fragment_shader>
uniform sampler2D diffuse_texture;
uniform sampler2D specular_texture;
uniform sampler2D reflectance_texture;

in vec2 out_tex_coord;

void main() {
	vec4 diff_color = texture(diffuse_texture, out_tex_coord);
	// TODO: fix this (must be "<" 0.5)
	if(diff_color.a <= 0.5) discard;
	
	vec4 spec_color = texture(specular_texture, out_tex_coord);
	vec3 refl_color = texture(reflectance_texture, out_tex_coord).xyz;
	
	vec4 light_colors[2] = compute_light_colors();
	
	////////////////////////////////////////////////////////////////////////////
	// lighting
	vec3 final_color = compute_diffuse(diff_color.rgb, refl_color, light_colors[0]);
	final_color += compute_specular(spec_color.rgb, refl_color, light_colors[1]);
	
	<option match="opaque">
	frag_color = vec4(final_color * diff_color.a, 1.0);
	</option>
	<option match="alpha">
	frag_color = vec4(final_color * diff_color.a, diff_color.a);
	</option>
}
	</fragment_shader>
	
</a2e_shader>