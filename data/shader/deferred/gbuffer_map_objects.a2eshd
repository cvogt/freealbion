<?xml version="1.0" encoding="UTF-8"?>
<a2e_shader version="1">
	<includes>gbuffer</includes>
	
	<vertex_shader version="120">
		<variables>
			uniform mat4 local_mview;
			uniform mat4 local_scale;
			uniform vec3 cam_position;
			
			attribute vec3 ws_position;
			attribute vec3 normal;
			attribute vec2 texture_coord;
			attribute vec4 tc_restrict;
			
			varying vec3 out_normal;
			varying vec2 out_tex_coord;
			varying vec4 out_tc_restrict;
		</variables>
		<program>
void main() {
			mat4 transform_mat = local_scale * local_mview;
			
			out_normal = vec3(transform_mat * vec4(normal, 1.0));
			out_tex_coord = texture_coord;

			vec3 view_vec = normalize(vec3(cam_position.x - ws_position.x, 0.0, cam_position.z - ws_position.z));
			vec3 up_vec = vec3(0.0, 1.0, 0.0);
			vec3 right_vec = cross(view_vec, up_vec);
			
			mat3 bb_mat;
			bb_mat[0][0] = right_vec.x;
			bb_mat[1][0] = right_vec.y;
			bb_mat[2][0] = right_vec.z;
			
			bb_mat[0][1] = up_vec.x;
			bb_mat[1][1] = up_vec.y;
			bb_mat[2][1] = up_vec.z;
			
			bb_mat[0][2] = view_vec.x;
			bb_mat[1][2] = view_vec.y;
			bb_mat[2][2] = view_vec.z;
			
			vec4 vertex = vec4((bb_mat * gl_Vertex.xyz) + ws_position, 1.0);
			out_normal = bb_mat * -out_normal;
			
			out_tc_restrict = tc_restrict;
			
			gl_Position = gl_ModelViewProjectionMatrix * vertex;
}
		</program>
	</vertex_shader>
	
	<fragment_shader>
		<variables>
			uniform sampler2D diffuse_texture;
			uniform sampler2D specular_texture;
			uniform vec2 Nuv;
			uniform vec2 texel_size;
			
			varying vec3 out_normal;
			varying vec2 out_tex_coord;
			varying vec4 out_tc_restrict;
		</variables>
		<program>
void main() {
			vec2 tex_coord = clamp(out_tex_coord, out_tc_restrict.xy+texel_size, out_tc_restrict.zw-texel_size);
			vec4 diffuse_color = texture2D(diffuse_texture, tex_coord);
			vec4 specular_color = texture2D(specular_texture, tex_coord);
			
			// write to gbuffer
			write_gbuffer(diffuse_color, specular_color, out_normal, Nuv);
}
		</program>
	</fragment_shader>

</a2e_shader>