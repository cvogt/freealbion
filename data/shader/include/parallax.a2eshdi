<?xml version="1.0" encoding="UTF-8"?>
<a2e_shader_include version="1">
	<vertex_shader preprocessing="LIGHTING">
		<variables>
uniform vec3 cam_position;
uniform vec3 model_position;
uniform mat4 local_mview;
uniform mat4 local_scale;
$LIGHT_VS_UNIFORMS

$LIGHT_VS_DEFINES

attribute vec3 normal;
attribute vec3 binormal;
attribute vec3 tangent;
attribute vec2 texture_coord;

$LIGHT_VS_VARYINGS
varying vec2 tex_coord;
varying vec3 ntex_coord;
varying vec3 view_vec;
		</variables>
		<program>
void main() {
	gl_Position = ftransform();

	mat4 transform_mat = local_scale * local_mview;
	vec3 tvertex = vec3(transform_mat * gl_Vertex);

	tex_coord = texture_coord;
	ntex_coord = vec3(tex_coord, 1.0);

	vec3 vview = cam_position - model_position - tvertex;

	vec3 vv_tangent = vec3(transform_mat * vec4(tangent, 1.0));
	vec3 vv_binormal = vec3(transform_mat * vec4(binormal, 1.0));
	vec3 vv_normal = vec3(transform_mat * vec4(normal, 1.0));

	view_vec.x = dot(vview, vv_tangent);  // s tangent
	view_vec.y = dot(vview, vv_binormal); // t tangent
	view_vec.z = dot(vview, vv_normal);   // normal

	float dist;
	vec3 vlight;
	$LIGHT_VS_LOOP_BEGIN
		vlight = $LIGHT_VS_POSITION_ITER - tvertex - model_position;
		
		// s tangent, t tangent, normal
		light_dir[$LIGHT_VS_ITER] = vec3(dot(vlight, vv_tangent), dot(vlight, vv_binormal), dot(vlight, vv_normal));
		
		dist = length(vlight);
		attenuation[$LIGHT_VS_ITER] = max(1.0 / ($LIGHT_VS_CONSTANT_ATTENUATION_ITER + ($LIGHT_VS_LINEAR_ATTENUATION_ITER * dist) + ($LIGHT_VS_QUADRATIC_ATTENUATION_ITER * dist * dist)), 0.0);
	$LIGHT_VS_LOOP_END
}
		</program>
	</vertex_shader>
</a2e_shader_include>