
#ifndef __A2E_MATRIX_CLH__
#define __A2E_MATRIX_CLH__

typedef float16 matrix4;

matrix4 matrix4_mul_matrix4(const matrix4 mat_1, const matrix4 mat_2) {
	matrix4 ret_mat;
	for(size_t i = 0; i < 4; i++) { // row
		for(size_t j = 0; j < 4; j++) { // column
			((float*)&ret_mat)[i*4 + j] = 0.0f;
			for(size_t k = 0; k < 4; k++) { // mul iteration
				((float*)&ret_mat)[i*4 + j] +=
					((const float*)&mat_1)[i*4 + k] * ((const float*)&mat_2)[k*4 + j];
			}
		}
	}
	return ret_mat;
}

float4 matrix4_mul_float4(const matrix4 mat, const float4 vec) {
	float4 ret_vec;
	ret_vec.x = dot(vec, (mat).lo.lo);
	ret_vec.y = dot(vec, (mat).lo.hi);
	ret_vec.z = dot(vec, (mat).hi.lo);
	ret_vec.w = dot(vec, (mat).hi.hi);
	return ret_vec;
}

/*template<typename T> matrix4<T>& matrix4<T>::invert() {
	matrix4<T> mat;
	
	float p00 = data[10] * data[15];
	float p01 = data[14] * data[11];
	float p02 = data[6] * data[15];
	float p03 = data[14] * data[7];
	float p04 = data[6] * data[11];
	float p05 = data[10] * data[7];
	float p06 = data[2] * data[15];
	float p07 = data[14] * data[3];
	float p08 = data[2] * data[11];
	float p09 = data[10] * data[3];
	float p10 = data[2] * data[7];
	float p11 = data[6] * data[3];
	
	mat.data[0] = (p00 * data[5] + p03 * data[9] + p04 * data[13]) - (p01 * data[5] + p02 * data[9] + p05 * data[13]);
	mat.data[1] = (p01 * data[1] + p06 * data[9] + p09 * data[13]) - (p00 * data[1] + p07 * data[9] + p08 * data[13]);
	mat.data[2] = (p02 * data[1] + p07 * data[5] + p10 * data[13]) - (p03 * data[1] + p06 * data[5] + p11 * data[13]);
	mat.data[3] = (p05 * data[1] + p08 * data[5] + p11 * data[9]) - (p04 * data[1] + p09 * data[5] + p10 * data[9]);
	mat.data[4] = (p01 * data[4] + p02 * data[8] + p05 * data[12]) - (p00 * data[4] + p03 * data[8] + p04 * data[12]);
	mat.data[5] = (p00 * data[0] + p07 * data[8] + p08 * data[12]) - (p01 * data[0] + p06 * data[8] + p09 * data[12]);
	mat.data[6] = (p03 * data[0] + p06 * data[4] + p11 * data[12]) - (p02 * data[0] + p07 * data[4] + p10 * data[12]);
	mat.data[7] = (p04 * data[0] + p09 * data[4] + p10 * data[8]) - (p05 * data[0] + p08 * data[4] + p11 * data[8]);
	
	float q00 = data[8] * data[13];
	float q01 = data[12] * data[9];
	float q02 = data[4] * data[13];
	float q03 = data[12] * data[5];
	float q04 = data[4] * data[9];
	float q05 = data[8] * data[5];
	float q06 = data[0] * data[13];
	float q07 = data[12] * data[1];
	float q08 = data[0] * data[9];
	float q09 = data[8] * data[1];
	float q10 = data[0] * data[5];
	float q11 = data[4] * data[1];
	
	mat.data[8] = (q00 * data[7] + q03 * data[11] + q04 * data[15]) - (q01 * data[7] + q02 * data[11] + q05 * data[15]);
	mat.data[9] = (q01 * data[3] + q06 * data[11] + q09 * data[15]) - (q00 * data[3] + q07 * data[11] + q08 * data[15]);
	mat.data[10] = (q02 * data[3] + q07 * data[7] + q10 * data[15]) - (q03 * data[3] + q06 * data[7] + q11 * data[15]);
	mat.data[11] = (q05 * data[3] + q08 * data[7] + q11 * data[11]) - (q04 * data[3] + q09 * data[7] + q10 * data[11]);
	mat.data[12] = (q02 * data[10] + q05 * data[14] + q01 * data[6]) - (q04 * data[14] + q00 * data[6] + q03 * data[10]);
	mat.data[13] = (q08 * data[14] + q00 * data[2] + q07 * data[10]) - (q06 * data[10] + q09 * data[14] + q01 * data[2]);
	mat.data[14] = (q06 * data[6] + q11 * data[14] + q03 * data[2]) - (q10 * data[14] + q02 * data[2] + q07 * data[6]);
	mat.data[15] = (q10 * data[10] + q04 * data[2] + q09 * data[6]) - (q08 * data[6] + q11 * data[10] + q05 * data[2]);
	
	float x = 1.0f / (data[0] * mat.data[0] + data[4] * mat.data[1] + data[8] * mat.data[2] + data[12] * mat.data[3]);
	
	for(unsigned int i = 0; i < 4; i++) {
		for(unsigned int j = 0; j < 4; j++) {
			mat.data[i*4 + j] *= x;
		}
	}
	
	*this = mat;
	return *this;
}

template<typename T> matrix4<T>& matrix4<T>::identity() {
	data[0] = 1.0f;
	data[1] = 0.0f;
	data[2] = 0.0f;
	data[3] = 0.0f;
	
	data[4] = 0.0f;
	data[5] = 1.0f;
	data[6] = 0.0f;
	data[7] = 0.0f;
	
	data[8] = 0.0f;
	data[9] = 0.0f;
	data[10] = 1.0f;
	data[11] = 0.0f;
	
	data[12] = 0.0f;
	data[13] = 0.0f;
	data[14] = 0.0f;
	data[15] = 1.0f;
	
	return *this;
}

template<typename T> matrix4<T>& matrix4<T>::transpose() {
	matrix4 tmp = *this;
	for(size_t i = 0; i < 4; i++) {
		for(size_t j = 0; j < 4; j++) {
			data[i*4 + j] = tmp.data[j*4 + i];
		}
	}
	return *this;
}*/

#endif
